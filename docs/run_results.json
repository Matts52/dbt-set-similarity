{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-07-10T03:54:30.920290Z", "invocation_id": "8660b9c9-6b69-4988-bb0b-2d1c79a55489", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.703438Z", "completed_at": "2025-07-10T03:54:30.714158Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.714873Z", "completed_at": "2025-07-10T03:54:30.714905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01286005973815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_dice_coef", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.718210Z", "completed_at": "2025-07-10T03:54:30.720138Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.720790Z", "completed_at": "2025-07-10T03:54:30.720803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003999948501586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_jaccard_coef", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.724921Z", "completed_at": "2025-07-10T03:54:30.730455Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.731441Z", "completed_at": "2025-07-10T03:54:30.731453Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008740901947021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_overlap_coef", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.734157Z", "completed_at": "2025-07-10T03:54:30.757933Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.759139Z", "completed_at": "2025-07-10T03:54:30.759157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027750015258789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_tversky_coef", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.771648Z", "completed_at": "2025-07-10T03:54:30.783671Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.784273Z", "completed_at": "2025-07-10T03:54:30.784285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014909982681274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_dice_coef", "compiled": true, "compiled_code": "\n\nwith data_dice_coef as (\n    select\n        \n            str_split(trim(both '{}' from input_one), ',') as input_one,\n            str_split(trim(both '{}' from input_two), ',') as input_two,\n        \n            output\n    from \"test_database\".\"main_raw_data\".\"data_dice_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: weighted Tversky formula\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            \n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ) / nullif( ( \n        (\n            -- intersection\n            SELECT COUNT(DISTINCT value) \n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_one only (A - B)\n        (SELECT 0.5 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_one) AS value\n             EXCEPT\n             SELECT UNNEST(input_two) AS value\n         ) AS only_in_a\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_two only (B - A)\n        (SELECT 0.5 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_two) AS value\n             EXCEPT\n             SELECT UNNEST(input_one) AS value\n         ) AS only_in_b\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ), 0)\n\n\n\n\n as actual\nfrom data_dice_coef", "relation_name": "\"test_database\".\"main_model_output\".\"test_dice_coef\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.788519Z", "completed_at": "2025-07-10T03:54:30.796016Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.796660Z", "completed_at": "2025-07-10T03:54:30.796672Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011056900024414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_jaccard_coef", "compiled": true, "compiled_code": "\n\nwith data_jaccard_coef as (\n    select\n        \n            str_split(trim(both '{}' from input_one), ',') as input_one,\n            str_split(trim(both '{}' from input_two), ',') as input_two,\n        \n            output\n    from \"test_database\".\"main_raw_data\".\"data_jaccard_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: weighted Tversky formula\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            \n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ) / nullif( ( \n        (\n            -- intersection\n            SELECT COUNT(DISTINCT value) \n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_one only (A - B)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_one) AS value\n             EXCEPT\n             SELECT UNNEST(input_two) AS value\n         ) AS only_in_a\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_two only (B - A)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_two) AS value\n             EXCEPT\n             SELECT UNNEST(input_one) AS value\n         ) AS only_in_b\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ), 0)\n\n\n\n\n as actual\nfrom data_jaccard_coef", "relation_name": "\"test_database\".\"main_model_output\".\"test_jaccard_coef\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.800052Z", "completed_at": "2025-07-10T03:54:30.809290Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.810026Z", "completed_at": "2025-07-10T03:54:30.810038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012627840042114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_overlap_coef", "compiled": true, "compiled_code": "\n\nwith data_overlap_coef as (\n    select\n        \n            str_split(trim(both '{}' from input_one), ',') as input_one,\n            str_split(trim(both '{}' from input_two), ',') as input_two,\n        \n            output\n    from \"test_database\".\"main_raw_data\".\"data_overlap_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection count |A \u2229 B|\n    \n\n    -- denominator query: minimum of the sizes of column_one and column_two\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float\n     ) / nullif( ( \n        (\n            LEAST(\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_one) AS value),\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_two) AS value)\n            )\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_overlap_coef", "relation_name": "\"test_database\".\"main_model_output\".\"test_overlap_coef\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.826373Z", "completed_at": "2025-07-10T03:54:30.833543Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.834148Z", "completed_at": "2025-07-10T03:54:30.834159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009869098663330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_tversky_coef", "compiled": true, "compiled_code": "\n\nwith data_tversky_coef as (\n    select\n        \n            str_split(trim(both '{}' from input_one), ',') as input_one,\n            str_split(trim(both '{}' from input_two), ',') as input_two,\n        \n            output\n    from \"test_database\".\"main_raw_data\".\"data_tversky_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: weighted Tversky formula\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            \n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ) / nullif( ( \n        (\n            -- intersection\n            SELECT COUNT(DISTINCT value) \n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n            WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_one only (A - B)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_one) AS value\n             EXCEPT\n             SELECT UNNEST(input_two) AS value\n         ) AS only_in_a\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n\n        +\n\n        -- elements in column_two only (B - A)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_two) AS value\n             EXCEPT\n             SELECT UNNEST(input_one) AS value\n         ) AS only_in_b\n         WHERE value IS NOT NULL AND value <> ''\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_tversky_coef", "relation_name": "\"test_database\".\"main_model_output\".\"test_tversky_coef\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.837133Z", "completed_at": "2025-07-10T03:54:30.843809Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.844528Z", "completed_at": "2025-07-10T03:54:30.844540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00901484489440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_dice_coef_actual__expected.9b4edb764d", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"main_model_output\".\"test_dice_coef\"\n    where\n        abs(actual - expected) > 0.0001\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.847545Z", "completed_at": "2025-07-10T03:54:30.890773Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.891626Z", "completed_at": "2025-07-10T03:54:30.891638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.045623064041137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_jaccard_coef_actual__expected.93abc61d97", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"main_model_output\".\"test_jaccard_coef\"\n    where\n        abs(actual - expected) > 0.0001\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.895242Z", "completed_at": "2025-07-10T03:54:30.908123Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.908658Z", "completed_at": "2025-07-10T03:54:30.908669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014780998229980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_overlap_coef_actual__expected.e66a4b7506", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"main_model_output\".\"test_overlap_coef\"\n    where\n        abs(actual - expected) > 0.0001\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-10T03:54:30.911394Z", "completed_at": "2025-07-10T03:54:30.916936Z"}, {"name": "execute", "started_at": "2025-07-10T03:54:30.917468Z", "completed_at": "2025-07-10T03:54:30.917479Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00735163688659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_tversky_coef_actual__expected.fa4b6e9697", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"main_model_output\".\"test_tversky_coef\"\n    where\n        abs(actual - expected) > 0.0001\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.3870100975036621, "args": {"warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "write_json": true, "require_batched_execution_for_custom_microbatch_strategy": false, "log_level": "info", "invocation_command": "dbt docs generate", "populate_cache": true, "indirect_selection": "eager", "send_anonymous_usage_stats": true, "state_modified_compare_more_unrendered_values": false, "partial_parse_file_diff": true, "use_colors_file": true, "exclude": [], "version_check": true, "project_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": false, "quiet": false, "static_parser": true, "log_path": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests/logs", "strict_mode": false, "introspect": true, "log_format_file": "debug", "which": "generate", "profiles_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "require_resource_names_without_spaces": false, "static": false, "vars": {}, "log_level_file": "debug", "partial_parse": true, "defer": false, "skip_nodes_if_on_run_start_fails": false, "empty_catalog": false, "favor_state": false, "show_resource_report": false, "use_colors": true, "state_modified_compare_vars": false, "require_explicit_package_overrides_for_builtin_materializations": true, "print": true, "cache_selected_only": false, "log_file_max_bytes": 10485760, "printer_width": 80, "select": [], "compile": true, "require_nested_cumulative_type_params": false, "log_format": "default"}}