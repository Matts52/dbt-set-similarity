{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.5", "generated_at": "2024-11-11T21:59:03.706690Z", "invocation_id": "c485fd0c-38a1-4f55-8861-8649dfc40f4f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.585746Z", "completed_at": "2024-11-11T21:59:03.605738Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.606711Z", "completed_at": "2024-11-11T21:59:03.606748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023230791091918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_dice_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.610802Z", "completed_at": "2024-11-11T21:59:03.613276Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.613983Z", "completed_at": "2024-11-11T21:59:03.613998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0048580169677734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_jaccard_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.617266Z", "completed_at": "2024-11-11T21:59:03.619471Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.620323Z", "completed_at": "2024-11-11T21:59:03.620337Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00454401969909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_overlap_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.623331Z", "completed_at": "2024-11-11T21:59:03.638771Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.639384Z", "completed_at": "2024-11-11T21:59:03.639397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0174100399017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_dice_coef", "compiled": true, "compiled_code": "with data_dice_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_dice_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: 2 * intersection count\n    \n\n    -- denominator query: cardinality of column_one + cardinality of column_two\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            2 * (\n                SELECT \n                    COUNT(DISTINCT value) AS intersection_count\n                FROM (\n                    SELECT UNNEST(input_one) AS value\n                    INTERSECT\n                    SELECT UNNEST(input_two) AS value\n                ) AS intersection\n            )\n        )::float\n     ) / nullif( ( \n        (\n            SELECT \n                COUNT(value) AS total_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                UNION ALL\n                SELECT UNNEST(input_two) AS value\n            ) AS union_all_set\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_dice_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_dice_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.642170Z", "completed_at": "2024-11-11T21:59:03.651975Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.652574Z", "completed_at": "2024-11-11T21:59:03.652586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011687040328979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_jaccard_coef", "compiled": true, "compiled_code": "with data_jaccard_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_jaccard_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: union of two sets\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float \n     ) / nullif( ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS union_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                UNION\n                SELECT UNNEST(input_two) AS value\n            ) AS union_set\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_jaccard_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_jaccard_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.655232Z", "completed_at": "2024-11-11T21:59:03.666050Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.666864Z", "completed_at": "2024-11-11T21:59:03.666878Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01287698745727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_overlap_coef", "compiled": true, "compiled_code": "with data_overlap_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_overlap_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection count |A \u2229 B|\n    \n\n    -- denominator query: minimum of the sizes of column_one and column_two\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float\n     ) / nullif( ( \n        (\n            LEAST(\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_one) AS value),\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_two) AS value)\n            )\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_overlap_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_overlap_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.669886Z", "completed_at": "2024-11-11T21:59:03.685178Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.685756Z", "completed_at": "2024-11-11T21:59:03.685767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017127275466918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_dice_coef_actual__expected.9b4edb764d", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_dice_coef\" where actual != expected\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.688467Z", "completed_at": "2024-11-11T21:59:03.693572Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.694128Z", "completed_at": "2024-11-11T21:59:03.694138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006859779357910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_jaccard_coef_actual__expected.93abc61d97", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_jaccard_coef\" where actual != expected\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-11T21:59:03.696820Z", "completed_at": "2024-11-11T21:59:03.702219Z"}, {"name": "execute", "started_at": "2024-11-11T21:59:03.702775Z", "completed_at": "2024-11-11T21:59:03.702786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007225751876831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_overlap_coef_actual__expected.e66a4b7506", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_overlap_coef\" where actual != expected\n", "relation_name": null}], "elapsed_time": 0.5635170936584473, "args": {"printer_width": 80, "write_json": true, "use_colors_file": true, "send_anonymous_usage_stats": true, "quiet": false, "version_check": true, "show_resource_report": false, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "select": [], "partial_parse": true, "which": "generate", "log_format": "default", "cache_selected_only": false, "invocation_command": "dbt docs generate", "empty_catalog": false, "favor_state": false, "strict_mode": false, "warn_error_options": {"include": [], "exclude": []}, "populate_cache": true, "static": false, "exclude": [], "project_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "enable_legacy_logger": false, "macro_debugging": false, "print": true, "static_parser": true, "profiles_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "use_colors": true, "require_resource_names_without_spaces": false, "require_explicit_package_overrides_for_builtin_materializations": true, "source_freshness_run_project_hooks": false, "log_format_file": "debug", "log_path": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests/logs", "defer": false, "log_level": "info", "partial_parse_file_diff": true, "vars": {}, "introspect": true, "log_level_file": "debug", "compile": true}}