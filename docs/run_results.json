{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.5", "generated_at": "2024-11-13T03:10:27.516048Z", "invocation_id": "8d323660-7a98-488f-a73f-d8855ecf7b39", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.346962Z", "completed_at": "2024-11-13T03:10:27.358915Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.359568Z", "completed_at": "2024-11-13T03:10:27.359588Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013731002807617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_dice_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.362650Z", "completed_at": "2024-11-13T03:10:27.364494Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.365050Z", "completed_at": "2024-11-13T03:10:27.365062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003841876983642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_jaccard_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.367879Z", "completed_at": "2024-11-13T03:10:27.369574Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.370078Z", "completed_at": "2024-11-13T03:10:27.370088Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034990310668945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_overlap_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.373061Z", "completed_at": "2024-11-13T03:10:27.375012Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.375748Z", "completed_at": "2024-11-13T03:10:27.375761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00482487678527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.set_similarity_integration_tests.data_tversky_coef", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.381748Z", "completed_at": "2024-11-13T03:10:27.394490Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.395045Z", "completed_at": "2024-11-13T03:10:27.395056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014807939529418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_dice_coef", "compiled": true, "compiled_code": "with data_dice_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_dice_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: 2 * intersection count\n    \n\n    -- denominator query: cardinality of column_one + cardinality of column_two\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            2 * (\n                SELECT \n                    COUNT(DISTINCT value) AS intersection_count\n                FROM (\n                    SELECT UNNEST(input_one) AS value\n                    INTERSECT\n                    SELECT UNNEST(input_two) AS value\n                ) AS intersection\n            )\n        )::float\n     ) / nullif( ( \n        (\n            SELECT \n                COUNT(value) AS total_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                UNION ALL\n                SELECT UNNEST(input_two) AS value\n            ) AS union_all_set\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_dice_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_dice_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.398219Z", "completed_at": "2024-11-13T03:10:27.410306Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.411322Z", "completed_at": "2024-11-13T03:10:27.411334Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014563798904418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_jaccard_coef", "compiled": true, "compiled_code": "with data_jaccard_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_jaccard_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: union of two sets\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float \n     ) / nullif( ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS union_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                UNION\n                SELECT UNNEST(input_two) AS value\n            ) AS union_set\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_jaccard_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_jaccard_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.413954Z", "completed_at": "2024-11-13T03:10:27.423204Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.423832Z", "completed_at": "2024-11-13T03:10:27.423843Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011086225509643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_overlap_coef", "compiled": true, "compiled_code": "with data_overlap_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_overlap_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection count |A \u2229 B|\n    \n\n    -- denominator query: minimum of the sizes of column_one and column_two\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float\n     ) / nullif( ( \n        (\n            LEAST(\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_one) AS value),\n                (SELECT COUNT(DISTINCT value) FROM UNNEST(input_two) AS value)\n            )\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_overlap_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_overlap_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.426760Z", "completed_at": "2024-11-13T03:10:27.439895Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.440939Z", "completed_at": "2024-11-13T03:10:27.440958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015639066696166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.set_similarity_integration_tests.test_tversky_coef", "compiled": true, "compiled_code": "with data_tversky_coef as (\n    select\n        input_one::int[] AS input_one,\n        input_two::int[] AS input_two,\n        output\n    from \"test_database\".\"set_similarity_integration_tests_postgres_raw_data\".\"data_tversky_coef\"\n)\n\nselect\n    input_one,\n    input_two,\n    output as expected,\n    \n\n    -- numerator query: intersection of two sets\n    \n\n    -- denominator query: weighted Tversky formula\n    \n\n    -- safe divide the two\n    \n    ( \n        (\n            SELECT \n                COUNT(DISTINCT value) AS intersection_count\n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float\n     ) / nullif( ( \n        (\n            -- intersection\n            SELECT COUNT(DISTINCT value) \n            FROM (\n                SELECT UNNEST(input_one) AS value\n                INTERSECT\n                SELECT UNNEST(input_two) AS value\n            ) AS intersection\n        )::float\n\n        +\n\n        -- elements in column_one only (A - B)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_one) AS value\n             EXCEPT\n             SELECT UNNEST(input_two) AS value\n         ) AS only_in_a\n        )::float\n\n        +\n\n        -- elements in column_two only (B - A)\n        (SELECT 1 * COUNT(DISTINCT value)\n         FROM (\n             SELECT UNNEST(input_two) AS value\n             EXCEPT\n             SELECT UNNEST(input_one) AS value\n         ) AS only_in_b\n        )::float\n     ), 0)\n\n\n as actual\nfrom data_tversky_coef", "relation_name": "\"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_tversky_coef\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.448039Z", "completed_at": "2024-11-13T03:10:27.465158Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.465721Z", "completed_at": "2024-11-13T03:10:27.465732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021416902542114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_dice_coef_actual__expected.9b4edb764d", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_dice_coef\" where actual != expected\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.469627Z", "completed_at": "2024-11-13T03:10:27.475189Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.481121Z", "completed_at": "2024-11-13T03:10:27.481147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014111995697021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_jaccard_coef_actual__expected.93abc61d97", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_jaccard_coef\" where actual != expected\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.487026Z", "completed_at": "2024-11-13T03:10:27.497433Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.498249Z", "completed_at": "2024-11-13T03:10:27.498260Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014590978622436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_overlap_coef_actual__expected.e66a4b7506", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_overlap_coef\" where actual != expected\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T03:10:27.503507Z", "completed_at": "2024-11-13T03:10:27.511783Z"}, {"name": "execute", "started_at": "2024-11-13T03:10:27.512514Z", "completed_at": "2024-11-13T03:10:27.512527Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010656118392944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.set_similarity_integration_tests.assert_equal_test_tversky_coef_actual__expected.fa4b6e9697", "compiled": true, "compiled_code": "\n    select * from \"test_database\".\"set_similarity_integration_tests_postgres_model_output\".\"test_tversky_coef\" where actual != expected\n", "relation_name": null}], "elapsed_time": 0.5199148654937744, "args": {"favor_state": false, "invocation_command": "dbt docs generate", "use_colors": true, "strict_mode": false, "exclude": [], "require_explicit_package_overrides_for_builtin_materializations": true, "log_path": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests/logs", "send_anonymous_usage_stats": true, "static": false, "log_level_file": "debug", "profiles_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "static_parser": true, "use_colors_file": true, "introspect": true, "project_dir": "/Users/matthewsenick/Github/DBT/dbt-set-similarity/integration_tests", "write_json": true, "enable_legacy_logger": false, "indirect_selection": "eager", "compile": true, "print": true, "printer_width": 80, "select": [], "vars": {}, "show_resource_report": false, "require_resource_names_without_spaces": false, "log_format_file": "debug", "empty_catalog": false, "quiet": false, "populate_cache": true, "macro_debugging": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "warn_error_options": {"include": [], "exclude": []}, "which": "generate", "partial_parse": true, "log_format": "default", "version_check": true, "source_freshness_run_project_hooks": false, "defer": false, "log_level": "info"}}